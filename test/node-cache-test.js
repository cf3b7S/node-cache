// Generated by CoffeeScript 1.8.0
var NodeCache, assert, myCache, randomString, _;

assert = require('assert');

_ = require('lodash');

NodeCache = require('../lib/node-cache');

myCache = new NodeCache();

randomString = function(length) {
  var chars, i, randomstring, rnum, _i;
  chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  if (length == null) {
    length = 10;
  }
  randomstring = '';
  for (i = _i = 1; 1 <= length ? _i <= length : _i >= length; i = 1 <= length ? ++_i : --_i) {
    rnum = Math.floor(Math.random() * chars.length);
    randomstring += chars.substring(rnum, rnum + 1);
  }
  return randomstring;
};

describe('node-cache', function() {
  var key, mdata, mkey, mvalue, value;
  key = randomString();
  value = randomString(100);
  mdata = [
    {
      key: randomString(),
      value: randomString(100)
    }, {
      key: randomString(),
      value: randomString(100)
    }
  ];
  mkey = _.pluck(mdata, 'key');
  mvalue = _.pluck(mdata, 'value');
  describe('#set()', function() {
    it('should return true', function() {
      return assert.equal(true, myCache.set(key, value));
    });
    it('keys should equal 1', function() {
      return assert.equal(1, myCache.stats.keys);
    });
    it('ksize should equal 10', function() {
      return assert.equal(10, myCache.stats.ksize);
    });
    return it('vsize should equal 100', function() {
      return assert.equal(100, myCache.stats.vsize);
    });
  });
  describe('#get()', function() {
    it('should equal value', function() {
      return assert.equal(value, myCache.get(key));
    });
    return it('hits should equal 1', function() {
      return assert.equal(1, myCache.stats.hits);
    });
  });
  describe('#del()', function() {
    it('should return 1', function() {
      return assert.equal(1, myCache.del(key));
    });
    return it('keys should equal 0', function() {
      return assert.equal(0, myCache.stats.keys);
    });
  });
  describe('#mset()', function() {
    it('should return true', function() {
      return assert.equal(true, myCache.mset(mdata));
    });
    it('keys should equal 2', function() {
      return assert.equal(2, myCache.stats.keys);
    });
    it('ksize should equal 20', function() {
      return assert.equal(20, myCache.stats.ksize);
    });
    return it('vsize should equal 200', function() {
      return assert.equal(200, myCache.stats.vsize);
    });
  });
  describe('#mget()', function() {
    it('should equal value', function() {
      var keyTmp;
      keyTmp = myCache.mget(mkey);
      assert.equal(mvalue[0], keyTmp[0]);
      return assert.equal(mvalue[1], keyTmp[1]);
    });
    return it('hits should equal 3', function() {
      return assert.equal(3, myCache.stats.hits);
    });
  });
  return describe('#mdel()', function() {
    it('should return 2', function() {
      return assert.equal(2, myCache.mdel(mkey));
    });
    return it('keys should equal 0', function() {
      return assert.equal(0, myCache.stats.keys);
    });
  });
});

//# sourceMappingURL=node-cache-test.js.map
